#!/usr/bin/ruby
#Test address database, particularly logic surrounding the primary record mechanism
require 'wyseman'
require 'wyseman/db'

DatabaseName	= File.read(File.join(File.dirname(__FILE__), 'DBNAME')).strip
AdminName	= File.read(File.join(File.dirname(__FILE__), 'DBUSER')).strip
db = Wyseman::DB.new({dbname: DatabaseName, user: AdminName})

#Delete any test users other than admin
res = db.doDelete('base.ent', Hash['id','o100'])


#Load in our sample user
baseSql= %Q{
	INSERT INTO base.ent
		(ent_num, ent_type, ent_name, born_date, country, tax_id)
	 VALUES	(100, 'o', 'Ahoy Chips', '2017-01-01', 'US', '234-56-7890');
	
	INSERT INTO base.addr
		(addr_ent, addr_seq, addr_spec, addr_type, addr_prim, addr_cmt, addr_inact, city, state, pcode, country) 
	 VALUES ('o100', 1, '2345 Corporate Way', 'ship', true, 'Headquarters', false, 'Bigtown', 'NY', '12345', 'US')
	      , ('o100', 2, '5432 Back Way', 'ship', false, 'Alternate Plant', false, 'Littletown', 'NM', '23456', 'US')
	      , ('o100', 3, '6543 Side Way', 'ship', false, 'Job Site', false, 'Sometown', 'CA', '34567', 'US')
	      ,	('o100', 4, 'PO Box 4567', 'bill', true, 'Mailing address', false, 'Bigtown', 'Ny', '12345-4567', 'US');
}
res = db.exec(baseSql)
#printf("Result:%s\n", res.ntuples)

res = db.doSelect('*', 'base.ent', {id:'o100'})
#printf("Tuples:%s id:%s\n", res.ntuples, res[0]['id'])
raise 'Failure to insert test data' if res.ntuples != 1 or res[0]['id'] != 'o100'

def comSelect(db)
  db.doSelect('addr_seq,addr_type,addr_cmt,addr_prim', 'base.addr_v', {addr_ent:'o100', addr_type:'ship', addr_prim:true})
end

#Imported with correct primary record
res = comSelect(db)
#printf("Ship primary:%s\n", res[0])
raise 'Wrong phone record primary' if res.ntuples != 1 or res[0]['addr_seq'] != '1'

#Can change primary record
res = db.doUpdate('base.addr_v', {addr_prim:'true'}, {addr_ent:'o100', addr_seq:2})
res = comSelect(db)
#printf("Ship primary:%s\n", res[0])
raise "Couldn't set new ship record primary" if res.ntuples != 1 or res[0]['addr_seq'] != '2'

#Setting inactive moves primary away from our record
res = db.doUpdate('base.addr_v', {addr_inact:'true'}, "addr_ent = 'o100' and addr_type = 'ship' and addr_seq < 3")
res = comSelect(db)
#printf("Phone primary:%s\n", res[0])
raise "Primary records should resolve to 3" if res.ntuples != 1 or res[0]['addr_seq'] != '3'

#Attempt to clear primary fails
res = db.doUpdate('base.addr_v', {addr_inact:'false'}, "addr_ent = 'o100'")
res = db.doUpdate('base.addr_v', {addr_prim:'false'}, "addr_ent = 'o100' and addr_seq = 3")
res = comSelect(db)
#printf("Phone primary:%s\n", res[0])
raise "Primary records should still be 3" if res.ntuples != 1 or res[0]['addr_seq'] != '3'

