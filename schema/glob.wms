# Miscellaneous functions and operators needed for wylib
#Copyright WyattERP: GNU GPL Ver 3; see: License in root of this package
#TODO:
#- 

# Return the number of fields in a string delimited by a given character
# Usage: field_count(string,delimiter)
#-------------------------------------------
#function field_count(text,text) {} {
#  returns int4 language pltcl as $$
#    return [llength [split $1 $2]]
#$$;}

# Convert a boolean to the values yes or no
#-------------------------------------------
function norm_bool(boolean) {} {
  returns text immutable strict language sql as $$
    select case when $1 then 'yes' else 'no' end;
$$;}

# Convert a numeric to a comma separated dollar amount
#-------------------------------------------
function comma_dollar(numeric) {} {
  returns text immutable language sql as $$
    select to_char($1,'999,999,999.99');
$$;}

# Convert a float to a comma separated dollar amount
#-------------------------------------------
function comma_dollar(float8) {} {
  returns text immutable language sql as $$
    select to_char($1,'999,999,999.99');
$$;}

# Format a float to display exactly 2 decimal places
# Usage: norm_dollar(value)
#----------------------------------------------------------------
#function norm_dollar(float8) {} {
#  returns text language pltcl as $$
#    if {$1 == {(null)} || $1 == {}} {return 0.00}
#    return [format {%#.2f} [expr floor($1 * 100 + 0.5) / 100.00]]
#$$;}
	
# Convert the month to an alpha string
#-------------------------------------------
function norm_date(date) {} {
  returns text immutable language sql as $$
    select to_char($1,'YYYY-Mon-DD');
$$;}

# Convert the month to an alpha string
#-------------------------------------------
function norm_date(timestamptz) {} {
  returns text immutable language sql as $$
    select to_char($1,'YYYY-Mon-DD HH24:MI:SS');
$$;}

# Convert a date to Year-Quarter format
#-------------------------------------------
function date_quart(date) {} {
  returns text language sql as $$
    select to_char($1,'YYYY-Q');
$$;}

# Convert a date to absolute seconds (according to tcl)
#-------------------------------------------
#function date_seconds(text) {} {
#  returns int4 immutable strict language pltcl as $$
#    return [clock scan $1]
#$$;}

# Return a digit 0 - n based on where a value falls in a predefined list
# Usage: ordinal(value,list)
#-------------------------------------------
#function ord(text,text) {} {
#  returns int4 immutable language pltcl as $$
#    set idx [lsearch -exact $2 $1]
#    if {$idx >= 0} {return $idx}
#    return [llength $2]
#$$;}

#Check a string to see if it contains a date
#-------------------------------------------
function {is_date(s text)} {} {returns boolean language plpgsql immutable as $$
    begin 
      perform s::date;
      return true;
    exception when others then
      return false;
    end;
$$;}

#Case insensitive operators (for consistency with other operators)
#-------------------------------------------
function eqnocase(text,text) {} {
  returns boolean language plpgsql immutable as $$
    begin return upper($1) = upper($2); end;
$$;}
other eqnocase_o eqnocase(text,text) {
    create operator =* (leftarg = text,rightarg = text,procedure = eqnocase, negator = !=*);
} {drop operator if exists =* (text,text);}

function neqnocase(text,text) {} {
  returns boolean language plpgsql immutable as $$
    begin return upper($1) != upper($2); end;
$$;}
other neqnocase_o neqnocase(text,text) {
    create operator !=* (leftarg = text,rightarg = text,procedure = neqnocase, negator = =*);
} {drop operator if exists !=* (text,text);}
