#!/usr/bin/tclsh
# Initialize data structures in the project tables
#Copyright WyattERP.org; See license in root of this package
#----------------------------------------------------------------
package require wylib
package require csv

set exlist [sql::qlist "select code from acct.proj_type"]
#debug exlist

set qlist {}
foreach ln {
  {h	{Holding}			true
	{This project can not have transactions booked directly to it, but
	rather serves as a place holder for other sub-projects.  There is
	a special holding project (0) which is the parent of all other 
	projects, and is the only project allowed to not have a parent 
	defined.

	Holding projects should be able to be used under an entity as well 
	to group other similar projects.  For example, we should be able
	to put a bunch of jobs under a holding project.  Once you have
	created a single child of a holding project, it should never be
	able to get a direct child of a different type.}}

  {u	{Business Unit}			false
	{There should only be type 'hld' projects between this type and
	project 0.  Or this type of project can be a direct child of 0.

	These projects can have any type of child projects.  Typically
	though, they should have just a handful of holding projects (such
	as one for each administrative area of the company).
	Not subject to funding limitations.}}

  {e	Entity				false
        {This is like the business unit type except it meant to identify outside
	entities such as customers, employees or vendors.  By tracking the 
	activity in this type of project we can support the notion of a
	"customer account" or an "employee tab."}}

  {b	{Bank}				false
	{This type of project can be used for such things as:
		bank accounts
		loans, credit lines
		credit cards}}

  {a	{Asset}				false
	{This type of project can be used for such things as:
		inventory
		capital assets
	It is for items that are not cash-denominated and may have periodic
	value-changing events such as depreciation, appreciation, and so forth.}}

  {j	{Percent Completion Job}	true
	{Project should contain only income and expense accounts.  Revenue
	can be accrued on a percent-completion basis by attributing an
	expected margin to each accrued expense.}}

  {i	{Contract Completion Job}	true
	{Project should contain only income and expense transactions.  
	As long as the job is open, all income will accrue to deposits
	(liability) and all costs will accrue to jobs in process (asset).
	Upon contract completion, the accrued cost will be credited 
	back off of the balance sheet and debited to COGS.  Payments will
	be credited to sales.}}

  {f	{Off The Shelf}			true
	{Project is for sales revenues and cogs expenses for products sold
	off-the-shelf.  Revenues and costs will accrue at the moment of
	completion of each order.}}

  {s	{Sub Project}			true
  	{Project can be under any other type of project for the purpose of
	aiding in management or accountability.  However, for purposes of
	financial reporting, transactions in this type of project will
	appear in their parent project.}}

  {c	{Cost Center}			true
  	{Project should contain primarily expenses which will accrue to
	G&A or other type of overhead expense.  Income may be optionally be applied 
	if it is of a nature to offset overhead expenses.}}

  {w	{Work in Process}		false
  	{Work in Process projects can accumulate material costs, labor and
	A/P.  The purpose is to culminate in the production of an asset
	such as inventory.  This may be determined to be the same as jip.}}

  {p	{Production Order}		false
  	{Each purchase order item should allocate a project number.  This is
	probably the same as wip as it accumulates cost and is expected to
	close out to zero.}}
} {
    lassign $ln code name funding descr
    if {[lcontain $exlist $code]} continue
    regsub -all {\t} $descr { } descr
    regsub -all {\n\n} $descr {~} descr
    regsub -all {\n} $descr { } descr
    regsub -all {~} $descr "\n" descr
    if {$descr == {}} {set descr {null}} else {set descr "'[sql::escape $descr]'"}
    lappend qlist "insert into acct.proj_type (code, name, funding, descr) values ('$code','[sql::escape $name]','$funding',$descr)"
}

#puts "query:\n[join $qlist ";\n"]"
sql::x [join $qlist ";\n"]




#Make top-level project 0
set exlist [sql::qlist "select code from acct.proj where numb < 10"]
#debug exlist
set qlist {}
set query {}
foreach ln {
  {h	0	{Master Holding} {A toplevel project to contain all othe projects.  This must have the proj_id of 0 and is the only project allowed (and required) to have a null parent.}}
} {
    lassign $ln type numb name descr
    set code "$type$numb"
    if {[lcontain $exlist $code]} continue
    regsub -all {~} $descr "\n" descr
    if {$descr == {}} {set descr {null}} else {set descr "'[sql::escape $descr]'"}
    lappend qlist "insert into acct.proj (type, numb, name, descr) values ('$type',$numb,'[sql::escape $name]',$descr)"
}

#puts "query:\n[join $qlist ";\n"]"
sql::x [join $qlist ";\n"]
