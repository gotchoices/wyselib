# Entity communication points
#------------------------------------------
# Copyright WyattERP all rights reserved
#TODO:
#- 
namespace eval base {
    def comm_pk		{comm_ent comm_seq}
    def comm_v_in	{comm_ent comm_type comm_spec comm_cmt comm_label status}
    def comm_v_up	[lremove $comm_v_in comm_ent]
    def comm_se		[concat $comm_pk $comm_v_up $glob::stampfn]
    def comm_types	{phone email cell fax text web pager other}
	 def comm_labels  {phone work other}
    def comm_local	{}
}

# Contains an entry for each way of contacting an entity
#----------------------------------------------------------------
table base.comm {base.ent} {
    comm_ent	int		references base.ent on update cascade on delete cascade
  , comm_seq	int
  , primary key (comm_ent, comm_seq)

  , comm_spec	varchar
  , comm_type	varchar		not null check(comm_type in ('eval(join $base::comm_types {','})'))
  , comm_cmt	varchar
  , comm_label varchar		default false check(comm_label in ('eval(join $base::comm_labels {','})'))
  , status		boolean
    subst($base::comm_local)	-- locally defined columns
    subst($glob::stamps)
}
index {} base.comm comm_spec

# Generate unique sequence for new address entry
#----------------------------------------------------------------
function base.comm_tf_seq() {base.comm} {
  returns trigger security definer language plpgsql as $$
    begin
        if new.comm_seq is null then
            select into new.comm_seq coalesce(max(comm_seq),0)+1 from base.comm where comm_ent = new.comm_ent;
        end if;
        return new;
    end;
$$;}
trigger base_comm_tr_seq {} {
    before insert on base.comm for each row execute procedure base.comm_tf_seq();
}

#Base communication view
#----------------------------------------------------------------
view base.comm_v {base.comm base.ent_v} {
    select eval(fld_list $base::comm_se c)
      , oe.std_name
      , c.oid		as _oid

    from	base.comm	c
    join	base.ent_v	oe	on oe.id = c.comm_ent;

    eval(rule_insert base.comm_v base.comm $base::comm_v_in {} $glob::stampin);
    eval(rule_update base.comm_v base.comm $base::comm_v_up $base::comm_pk {} $glob::stampup);
    eval(rule_delete base.comm_v base.comm $base::comm_pk);
} -grant {
    {entim	s {i u} d}
}


