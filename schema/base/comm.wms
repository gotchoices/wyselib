# Entity communication points
#------------------------------------------
# Copyright WyattERP all rights reserved
#TODO:
#- 
require base.tcl ../trigview.tcl

namespace eval base {
    def comm_pk		{comm_ent comm_seq}
    def comm_v_in	{comm_ent comm_type comm_spec comm_cmt comm_inact comm_prim}
    def comm_v_up	[lremove $comm_v_in comm_ent]
    def comm_se		[concat $comm_pk $comm_v_up $glob::stampfn]
    def comm_types	{phone email cell fax text web pager other}
    def comm_local	{}
}

# Contains an entry for each way of contacting an entity
#----------------------------------------------------------------
table base.comm {base.ent} {
    comm_ent	text		references base.ent on update cascade on delete cascade
  , comm_seq	int	      , primary key (comm_ent, comm_seq)
  , comm_spec	text
  , comm_type	text		not null check(comm_type in ('eval(join $base::comm_types {','})'))
  , comm_prim	boolean		not null default false constraint "!base.comm.CPC" check(case when comm_inact is true then comm_prim is false end)
  , comm_cmt	text
  , comm_inact	boolean		not null default false
  , unique (comm_ent, comm_seq, comm_type)		-- Needed for comm_prim FK to work
    subst($base::comm_local)	-- locally defined columns
    subst($glob::stamps)
}
index {} base.comm comm_spec
index {} base.comm comm_type

# Stores a pointer indicating which comm record is primary for any given type
#----------------------------------------------------------------
table base.comm_prim {base.comm} {
    prim_ent	text
  , prim_seq	int
  , prim_type	text
  , primary key (prim_ent, prim_seq, prim_type)
  , foreign key (prim_ent, prim_seq, prim_type) references base.comm (comm_ent, comm_seq, comm_type)
    on update cascade on delete cascade deferrable
}

# Make the specified communication point primary
# -----------------------------------------------------------------
function {base.comm_make_prim(ent text, seq int, typ text)} {base.comm base.comm_prim} {
  returns void language plpgsql security definer as $$
    begin
--raise notice 'Prim it: % % %', ent, seq, typ;
        update base.comm_prim set prim_seq = seq where prim_ent = ent and prim_type = typ;
        if not found then
            insert into base.comm_prim (prim_ent,prim_seq,prim_type) values (ent,seq,typ);
        end if;
    end;
$$;}
    
# Un-make the specified communication point primary
# -----------------------------------------------------------------
function {base.comm_remove_prim(ent text, seq int, typ text)} {base.comm base.comm_prim} {
  returns void language plpgsql security definer as $$
    declare
        prim_rec	record;
        comm_rec	record;
    begin
--raise notice 'Unprim it: % % %', ent, seq, typ;
        select * into prim_rec from base.comm_prim where prim_ent = ent and prim_seq = seq and prim_type = typ;
        if found then			-- If the comm we are deleting was a primary, find the next latest record
            select * into comm_rec from base.comm where comm_ent = prim_rec.prim_ent and comm_type = prim_rec.prim_type and comm_seq != seq and not comm_inact order by comm_seq desc limit 1;
            if found then		-- And make it the new primary
--raise notice '  new seq:%', comm_rec.comm_seq;
                update base.comm_prim set prim_seq = comm_rec.comm_seq where prim_ent = comm_rec.comm_ent and prim_type = comm_rec.comm_type;
            else
--raise notice '  nuke:% % %', ent, seq, typ;
                delete from base.comm_prim where prim_ent = ent and prim_seq = seq and prim_type = typ;
            end if;
        else
--raise notice 'Z:% % %', ent, seq, typ;
        end if;
    end;
$$;}
    
# Triggers on base.comm inserts to make sure there is exactly one primary communication point for each type
# -----------------------------------------------------------------
function base.comm_tf_bi() {base.comm} {
  returns trigger language plpgsql security definer as $$
    begin
        if new.comm_seq is null then			-- Generate unique sequence for new communication entry
            select into new.comm_seq coalesce(max(comm_seq),0)+1 from base.comm where comm_ent = new.comm_ent;
        end if;
        if new.comm_inact then				-- Can't be primary if inactive
            new.comm_prim = false;
        elsif not exists (select comm_seq from base.comm where comm_ent = new.comm_ent and comm_type = new.comm_type) then
            new.comm_prim = true;			-- First record of its type becomes primary
        end if;
        if new.comm_prim then				-- If this is primary, all others are now not
            set constraints base.comm_prim_prim_ent_fkey deferred;
            perform base.comm_make_prim(new.comm_ent, new.comm_seq, new.comm_type);
        end if;
        new.comm_prim = false;				-- We don't actually store the status in this field
        return new;
    end;
$$;}
trigger base_comm_tr_bi {} {
    before insert on base.comm for each row execute procedure base.comm_tf_bi();
}

# On update
# -----------------------------------------------------------------
function base.comm_tf_bu() {base.comm} {
  returns trigger language plpgsql security definer as $$
    declare
        prim_it		boolean;			-- Make it primary (tri-state)
    begin
        if new.comm_inact or (not new.comm_prim and old.comm_prim) then	-- Can't be primary if inactive
            prim_it = false;
        elsif new.comm_prim and not old.comm_prim then
            prim_it = true;
        end if;
--raise notice 'X:% % %', old.comm_prim, new.comm_prim, prim_it;
        if prim_it then
            perform base.comm_make_prim(new.comm_ent, new.comm_seq, new.comm_type);
        elsif not prim_it then
            perform base.comm_remove_prim(new.comm_ent, new.comm_seq, new.comm_type);
        end if;
        new.comm_prim = false;				-- We don't actually store the status here
        return new;
    end;
$$;}
trigger base_comm_tr_bu {} {
    before update on base.comm for each row execute procedure base.comm_tf_bu();
}

# On delete
# -----------------------------------------------------------------
function base.comm_tf_bd() {base.comm} {
  returns trigger language plpgsql security definer as $$
    begin
        perform base.comm_remove_prim(old.comm_ent, old.comm_seq, old.comm_type);
        return old;
    end;
$$;}
trigger base_comm_tr_bd {} {
    before delete on base.comm for each row execute procedure base.comm_tf_bd();
}

# Make sure at least one active record is left marked as primary, where possible
# -----------------------------------------------------------------
function base.comm_tf_aiud() {base.comm} {
  returns trigger language plpgsql security definer as $$
    begin
        insert into base.comm_prim (prim_ent, prim_seq, prim_type) 
            select comm_ent,max(comm_seq),comm_type from base.comm where not comm_inact and not exists (select * from base.comm_prim cp where cp.prim_ent = comm_ent and cp.prim_type = comm_type) group by 1,3;
        return old;
    end;
$$;}
trigger base_comm_tr_aiud {} {
    after insert or update or delete on base.comm for each statement execute procedure base.comm_tf_aiud();
}

#Base communication view
#----------------------------------------------------------------
view base.comm_v {base.comm base.ent_v base.comm_prim} {
    select eval(fld_list [lremove $base::comm_se comm_prim] c)
      , oe.std_name
      , cp.prim_seq is not null and cp.prim_seq = c.comm_seq	as comm_prim

    from	base.comm	c
    join	base.ent_v	oe	on oe.id = c.comm_ent
    left join	base.comm_prim	cp	on cp.prim_ent = c.comm_ent and cp.prim_type = c.comm_type;

    eval(trigview::insert base.comm_v base.comm $base::comm_v_in $base::comm_pk $glob::stampin);
    eval(trigview::update base.comm_v base.comm $base::comm_v_up $base::comm_pk $glob::stampup);
    eval(rule_delete base.comm_v base.comm $base::comm_pk);
} -grant {
    {entim	s {i u} d}
}

# Base communication view to join with ent to make a flat view
#----------------------------------------------------------------
lassign {} flist jlist
set i 0; foreach t $base::comm_types {
    lappend flist "c$i.comm_spec as \"${t}_comm\""
    lappend jlist "left join base.comm c$i on c$i.comm_ent = e.id and c$i.comm_type = '$t' and c$i.comm_prim"
    incr i
}
view base.comm_v_flat {base.comm base.ent_v} "select e.id, [join $flist {, }] from base.ent e [join $jlist];"
