# Entity addresses
#Copyright WyattERP.org; See license in root of this package
#------------------------------------------
#TODO:
#- Get rid of dirty
#- 
require base.tcl ../trigview.tcl

namespace eval base {
    def addr_pk		{addr_ent addr_seq}
    def addr_v_in	{addr_ent addr_spec city state pcode country addr_cmt addr_type addr_prim addr_inact}
    def addr_v_up	[lremove $addr_v_in addr_ent]
    def addr_se		[concat $addr_pk $addr_v_up $glob::stampfn]
    def addr_local	{}
    def addr_types	{phys mail bill ship}
}

# Contains an entry for each address for an entity
#----------------------------------------------------------------
table base.addr {base.ent} {
    addr_ent	text		references base.ent on update cascade on delete cascade
  , addr_seq	int	      , primary key (addr_ent, addr_seq)
  , addr_spec	text		not null
  , addr_type	text		not null check(addr_type in ('eval(join $base::addr_types {','})'))
  , addr_prim	boolean		not null default false constraint "!base.addr.CPA" check(case when addr_inact is true then addr_prim is false end)
  , addr_cmt	text
  , addr_inact	boolean		not null default false
  , city	text
  , state	text
  , pcode	text
  , country	varchar(3)	constraint "!base.addr.CCO" not null default 'US' references base.country on update cascade
  , unique (addr_ent, addr_seq, addr_type)		-- Needed for addr_prim FK to work
    subst($base::addr_local)	-- locally defined columns
    subst($glob::stamps)
}
index {} base.addr addr_type

# Stores a pointer indicating which addr record is primary for any given type
#----------------------------------------------------------------
table base.addr_prim {base.addr} {
    prim_ent	text
  , prim_seq	int
  , prim_type	text
  , primary key (prim_ent, prim_seq, prim_type)
  , foreign key (prim_ent, prim_seq, prim_type) references base.addr (addr_ent, addr_seq, addr_type)
    on update cascade on delete cascade deferrable
}

# Make the specified address primary
# -----------------------------------------------------------------
function {base.addr_make_prim(ent text, seq int, typ text)} {base.addr base.addr_prim} {
  returns void language plpgsql security definer as $$
    begin
--raise notice 'Prim it: % % %', ent, seq, typ;
        update base.addr_prim set prim_seq = seq where prim_ent = ent and prim_type = typ;
        if not found then
            insert into base.addr_prim (prim_ent,prim_seq,prim_type) values (ent,seq,typ);
        end if;
    end;
$$;}
    
# Un-make the specified address primary
# -----------------------------------------------------------------
function {base.addr_remove_prim(ent text, seq int, typ text)} {base.addr base.addr_prim} {
  returns void language plpgsql security definer as $$
    declare
        prim_rec	record;
        addr_rec	record;
    begin
--raise notice 'Unprim it: % % %', ent, seq, typ;
        select * into prim_rec from base.addr_prim where prim_ent = ent and prim_seq = seq and prim_type = typ;
        if found then			-- If the addr we are deleting was a primary, find the next latest record
            select * into addr_rec from base.addr where addr_ent = prim_rec.prim_ent and addr_type = prim_rec.prim_type and addr_seq != seq and not addr_inact order by addr_seq desc limit 1;
            if found then		-- And make it the new primary
--raise notice '  new seq:%', addr_rec.addr_seq;
                update base.addr_prim set prim_seq = addr_rec.addr_seq where prim_ent = addr_rec.addr_ent and prim_type = addr_rec.addr_type;
            else
--raise notice '  nuke:% % %', ent, seq, typ;
                delete from base.addr_prim where prim_ent = ent and prim_seq = seq and prim_type = typ;
            end if;
        else
--raise notice 'Z:% % %', ent, seq, typ;
        end if;
    end;
$$;}
    
# Triggers on base.addr inserts to make sure there is exactly one primary address for each type
# -----------------------------------------------------------------
function base.addr_tf_bi() {base.addr} {
  returns trigger language plpgsql security definer as $$
    begin
        if new.addr_seq is null then			-- Generate unique sequence for new address entry
            update base.ent set _last_addr = greatest(coalesce(_last_addr,0) + 1,
              (select coalesce(max(addr_seq),0)+1 from base.addr where addr_ent = new.addr_ent)
            ) where id = new.addr_ent returning _last_addr into new.addr_seq;
            if not found then new.addr_seq = 1; end if;
-- select into new.addr_seq coalesce(max(addr_seq),0)+1 from base.addr where addr_ent = new.addr_ent; -- Not safe for concurrency
        end if;
        if new.addr_inact then				-- Can't be primary if inactive
            new.addr_prim = false;
        elsif not exists (select addr_seq from base.addr where addr_ent = new.addr_ent and addr_type = new.addr_type) then
            new.addr_prim = true;			-- First record of its type becomes primary
        end if;
        if new.addr_prim then				-- If this is primary, all others are now not
            set constraints base.addr_prim_prim_ent_fkey deferred;
            perform base.addr_make_prim(new.addr_ent, new.addr_seq, new.addr_type);
        end if;
        new.addr_prim = false;				-- We don't actually store the status in this field
        return new;
    end;
$$;}
trigger base_addr_tr_bi {} {
    before insert on base.addr for each row execute procedure base.addr_tf_bi();
}

# On update
# -----------------------------------------------------------------
function base.addr_tf_bu() {base.addr} {
  returns trigger language plpgsql security definer as $$
    declare
        prim_it		boolean;			-- Make it primary (tri-state)
    begin
        if new.addr_inact or (not new.addr_prim and old.addr_prim) then	-- Can't be primary if inactive
            prim_it = false;
        elsif new.addr_prim and not old.addr_prim then
            prim_it = true;
        end if;
--raise notice 'X:% % %', old.addr_prim, new.addr_prim, prim_it;
        if prim_it then
            perform base.addr_make_prim(new.addr_ent, new.addr_seq, new.addr_type);
        elsif not prim_it then
            perform base.addr_remove_prim(new.addr_ent, new.addr_seq, new.addr_type);
        end if;
        new.addr_prim = false;				-- We don't actually store the status here
        return new;
    end;
$$;}
trigger base_addr_tr_bu {} {
    before update on base.addr for each row execute procedure base.addr_tf_bu();
}

# On delete
# -----------------------------------------------------------------
function base.addr_tf_bd() {base.addr} {
  returns trigger language plpgsql security definer as $$
    begin
        perform base.addr_remove_prim(old.addr_ent, old.addr_seq, old.addr_type);
        return old;
    end;
$$;}
trigger base_addr_tr_bd {} {
    before delete on base.addr for each row execute procedure base.addr_tf_bd();
}

# Make sure at least one active record is left marked as primary, where possible
# -----------------------------------------------------------------
function base.addr_tf_aiud() {base.addr} {
  returns trigger language plpgsql security definer as $$
    begin
        insert into base.addr_prim (prim_ent, prim_seq, prim_type) 
            select addr_ent,max(addr_seq),addr_type from base.addr where not addr_inact and not exists (select * from base.addr_prim cp where cp.prim_ent = addr_ent and cp.prim_type = addr_type) group by 1,3;
        return old;
    end;
$$;}
trigger base_addr_tr_aiud {} {
    after insert or update or delete on base.addr for each statement execute procedure base.addr_tf_aiud();
}

# Base address view
#----------------------------------------------------------------
view base.addr_v {base.addr base.ent_v base.addr_prim} {
    select eval(fld_list [lremove $base::addr_se addr_prim] a)
      , oe.std_name
      , ap.prim_seq is not null and ap.prim_seq = a.addr_seq	as addr_prim

    from	base.addr	a
    join	base.ent_v	oe	on oe.id = a.addr_ent
    left join	base.addr_prim	ap	on ap.prim_ent = a.addr_ent and ap.prim_type = a.addr_type;

    eval(trigview::insert base.addr_v base.addr $base::addr_v_in $base::addr_pk $glob::stampin);
    eval(trigview::update base.addr_v base.addr $base::addr_v_up $base::addr_pk $glob::stampup);
    eval(rule_delete base.addr_v base.addr $base::addr_pk);
} -grant {
    {ent	s {i u} d}
}

# Base address view to join with ent to make a flat view
#----------------------------------------------------------------
lassign {} flist jlist
set i 0; foreach t $base::addr_types {
    lappend flist "a$i.addr_spec as \"${t}_addr\""
    lappend flist "a$i.city as \"${t}_city\""
    lappend flist "a$i.state as \"${t}_state\""
    lappend flist "a$i.pcode as \"${t}_pcode\""
    lappend flist "a$i.country as \"${t}_country\""
    lappend jlist "left join base.addr a$i on a$i.addr_ent = e.id and a$i.addr_type = '$t' and a$i.addr_prim"
    incr i
}
view base.addr_v_flat {base.addr base.ent_v} "select e.id, [join $flist {, }] from base.ent e [join $jlist];"
